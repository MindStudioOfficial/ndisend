// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, unused_element, constant_identifier_names, camel_case_types

import 'dart:ffi' as ffi;

class NDIffi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NDIffi(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NDIffi.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>('__va_start');
  late final ___va_start = ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('__security_init_cookie');
  late final ___security_init_cookie = ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('__security_check_cookie');
  late final ___security_check_cookie = ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('__report_gsfailure');
  late final ___report_gsfailure = ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie = _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  late final ffi.Pointer<ffi.Uint32> _INFINITE = _lookup<ffi.Uint32>('INFINITE');

  int get INFINITE => _INFINITE.value;

  set INFINITE(int value) => _INFINITE.value = value;

  late final ffi.Pointer<ffi.Int64> _NDIlib_send_timecode_synthesize =
      _lookup<ffi.Int64>('NDIlib_send_timecode_synthesize');

  int get NDIlib_send_timecode_synthesize => _NDIlib_send_timecode_synthesize.value;

  set NDIlib_send_timecode_synthesize(int value) => _NDIlib_send_timecode_synthesize.value = value;

  late final ffi.Pointer<ffi.Int64> _NDIlib_recv_timestamp_undefined =
      _lookup<ffi.Int64>('NDIlib_recv_timestamp_undefined');

  int get NDIlib_recv_timestamp_undefined => _NDIlib_recv_timestamp_undefined.value;

  set NDIlib_recv_timestamp_undefined(int value) => _NDIlib_recv_timestamp_undefined.value = value;

  bool NDIlib_initialize() {
    return _NDIlib_initialize() != 0;
  }

  late final _NDIlib_initializePtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('NDIlib_initialize');
  late final _NDIlib_initialize = _NDIlib_initializePtr.asFunction<int Function()>();

  void NDIlib_destroy() {
    return _NDIlib_destroy();
  }

  late final _NDIlib_destroyPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('NDIlib_destroy');
  late final _NDIlib_destroy = _NDIlib_destroyPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Int8> NDIlib_version() {
    return _NDIlib_version();
  }

  late final _NDIlib_versionPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>('NDIlib_version');
  late final _NDIlib_version = _NDIlib_versionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  bool NDIlib_is_supported_CPU() {
    return _NDIlib_is_supported_CPU() != 0;
  }

  late final _NDIlib_is_supported_CPUPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('NDIlib_is_supported_CPU');
  late final _NDIlib_is_supported_CPU = _NDIlib_is_supported_CPUPtr.asFunction<int Function()>();

  NDIlib_find_instance_t NDIlib_find_create_v2(
    ffi.Pointer<NDIlib_find_create_t> p_create_settings,
  ) {
    return _NDIlib_find_create_v2(
      p_create_settings,
    );
  }

  late final _NDIlib_find_create_v2Ptr =
      _lookup<ffi.NativeFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>>(
          'NDIlib_find_create_v2');
  late final _NDIlib_find_create_v2 =
      _NDIlib_find_create_v2Ptr.asFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>();

  void NDIlib_find_destroy(
    NDIlib_find_instance_t p_instance,
  ) {
    return _NDIlib_find_destroy(
      p_instance,
    );
  }

  late final _NDIlib_find_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_find_instance_t)>>('NDIlib_find_destroy');
  late final _NDIlib_find_destroy = _NDIlib_find_destroyPtr.asFunction<void Function(NDIlib_find_instance_t)>();

  ffi.Pointer<NDIlib_source_t> NDIlib_find_get_current_sources(
    NDIlib_find_instance_t p_instance,
    ffi.Pointer<ffi.Uint32> p_no_sources,
  ) {
    return _NDIlib_find_get_current_sources(
      p_instance,
      p_no_sources,
    );
  }

  late final _NDIlib_find_get_current_sourcesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<NDIlib_source_t> Function(NDIlib_find_instance_t, ffi.Pointer<ffi.Uint32>)>>(
      'NDIlib_find_get_current_sources');
  late final _NDIlib_find_get_current_sources = _NDIlib_find_get_current_sourcesPtr.asFunction<
      ffi.Pointer<NDIlib_source_t> Function(NDIlib_find_instance_t, ffi.Pointer<ffi.Uint32>)>();

  bool NDIlib_find_wait_for_sources(
    NDIlib_find_instance_t p_instance,
    int timeout_in_ms,
  ) {
    return _NDIlib_find_wait_for_sources(
          p_instance,
          timeout_in_ms,
        ) !=
        0;
  }

  late final _NDIlib_find_wait_for_sourcesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_find_instance_t, ffi.Uint32)>>(
          'NDIlib_find_wait_for_sources');
  late final _NDIlib_find_wait_for_sources =
      _NDIlib_find_wait_for_sourcesPtr.asFunction<int Function(NDIlib_find_instance_t, int)>();

  NDIlib_recv_instance_t NDIlib_recv_create_v3(
    ffi.Pointer<NDIlib_recv_create_v3_t> p_create_settings,
  ) {
    return _NDIlib_recv_create_v3(
      p_create_settings,
    );
  }

  late final _NDIlib_recv_create_v3Ptr =
      _lookup<ffi.NativeFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_v3_t>)>>(
          'NDIlib_recv_create_v3');
  late final _NDIlib_recv_create_v3 =
      _NDIlib_recv_create_v3Ptr.asFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_v3_t>)>();

  void NDIlib_recv_destroy(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_destroy(
      p_instance,
    );
  }

  late final _NDIlib_recv_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t)>>('NDIlib_recv_destroy');
  late final _NDIlib_recv_destroy = _NDIlib_recv_destroyPtr.asFunction<void Function(NDIlib_recv_instance_t)>();

  void NDIlib_recv_connect(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_source_t> p_src,
  ) {
    return _NDIlib_recv_connect(
      p_instance,
      p_src,
    );
  }

  late final _NDIlib_recv_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_source_t>)>>(
          'NDIlib_recv_connect');
  late final _NDIlib_recv_connect =
      _NDIlib_recv_connectPtr.asFunction<void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_source_t>)>();

  int NDIlib_recv_capture_v2(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_audio_data,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
    int timeout_in_ms,
  ) {
    return _NDIlib_recv_capture_v2(
      p_instance,
      p_video_data,
      p_audio_data,
      p_metadata,
      timeout_in_ms,
    );
  }

  late final _NDIlib_recv_capture_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              NDIlib_recv_instance_t,
              ffi.Pointer<NDIlib_video_frame_v2_t>,
              ffi.Pointer<NDIlib_audio_frame_v2_t>,
              ffi.Pointer<NDIlib_metadata_frame_t>,
              ffi.Uint32)>>('NDIlib_recv_capture_v2');
  late final _NDIlib_recv_capture_v2 = _NDIlib_recv_capture_v2Ptr.asFunction<
      int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_audio_frame_v2_t>,
          ffi.Pointer<NDIlib_metadata_frame_t>, int)>();

  int NDIlib_recv_capture_v3(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
    ffi.Pointer<NDIlib_audio_frame_v3_t> p_audio_data,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
    int timeout_in_ms,
  ) {
    return _NDIlib_recv_capture_v3(
      p_instance,
      p_video_data,
      p_audio_data,
      p_metadata,
      timeout_in_ms,
    );
  }

  late final _NDIlib_recv_capture_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              NDIlib_recv_instance_t,
              ffi.Pointer<NDIlib_video_frame_v2_t>,
              ffi.Pointer<NDIlib_audio_frame_v3_t>,
              ffi.Pointer<NDIlib_metadata_frame_t>,
              ffi.Uint32)>>('NDIlib_recv_capture_v3');
  late final _NDIlib_recv_capture_v3 = _NDIlib_recv_capture_v3Ptr.asFunction<
      int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_audio_frame_v3_t>,
          ffi.Pointer<NDIlib_metadata_frame_t>, int)>();

  void NDIlib_recv_free_video_v2(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
  ) {
    return _NDIlib_recv_free_video_v2(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_recv_free_video_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>>(
          'NDIlib_recv_free_video_v2');
  late final _NDIlib_recv_free_video_v2 = _NDIlib_recv_free_video_v2Ptr.asFunction<
      void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  void NDIlib_recv_free_audio_v2(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_audio_data,
  ) {
    return _NDIlib_recv_free_audio_v2(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_recv_free_audio_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>>(
          'NDIlib_recv_free_audio_v2');
  late final _NDIlib_recv_free_audio_v2 = _NDIlib_recv_free_audio_v2Ptr.asFunction<
      void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_recv_free_audio_v3(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v3_t> p_audio_data,
  ) {
    return _NDIlib_recv_free_audio_v3(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_recv_free_audio_v3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>>(
          'NDIlib_recv_free_audio_v3');
  late final _NDIlib_recv_free_audio_v3 = _NDIlib_recv_free_audio_v3Ptr.asFunction<
      void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>();

  void NDIlib_recv_free_metadata(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_recv_free_metadata(
      p_instance,
      p_metadata,
    );
  }

  late final _NDIlib_recv_free_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_recv_free_metadata');
  late final _NDIlib_recv_free_metadata = _NDIlib_recv_free_metadataPtr.asFunction<
      void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  void NDIlib_recv_free_string(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<ffi.Int8> p_string,
  ) {
    return _NDIlib_recv_free_string(
      p_instance,
      p_string,
    );
  }

  late final _NDIlib_recv_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<ffi.Int8>)>>(
          'NDIlib_recv_free_string');
  late final _NDIlib_recv_free_string =
      _NDIlib_recv_free_stringPtr.asFunction<void Function(NDIlib_recv_instance_t, ffi.Pointer<ffi.Int8>)>();

  bool NDIlib_recv_send_metadata(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_recv_send_metadata(
          p_instance,
          p_metadata,
        ) !=
        0;
  }

  late final _NDIlib_recv_send_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_recv_send_metadata');
  late final _NDIlib_recv_send_metadata = _NDIlib_recv_send_metadataPtr.asFunction<
      int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  bool NDIlib_recv_set_tally(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_tally_t> p_tally,
  ) {
    return _NDIlib_recv_set_tally(
          p_instance,
          p_tally,
        ) !=
        0;
  }

  late final _NDIlib_recv_set_tallyPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_tally_t>)>>(
          'NDIlib_recv_set_tally');
  late final _NDIlib_recv_set_tally =
      _NDIlib_recv_set_tallyPtr.asFunction<int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_tally_t>)>();

  void NDIlib_recv_get_performance(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_recv_performance_t> p_total,
    ffi.Pointer<NDIlib_recv_performance_t> p_dropped,
  ) {
    return _NDIlib_recv_get_performance(
      p_instance,
      p_total,
      p_dropped,
    );
  }

  late final _NDIlib_recv_get_performancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_performance_t>,
              ffi.Pointer<NDIlib_recv_performance_t>)>>('NDIlib_recv_get_performance');
  late final _NDIlib_recv_get_performance = _NDIlib_recv_get_performancePtr.asFunction<
      void Function(
          NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_performance_t>, ffi.Pointer<NDIlib_recv_performance_t>)>();

  void NDIlib_recv_get_queue(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_recv_queue_t> p_total,
  ) {
    return _NDIlib_recv_get_queue(
      p_instance,
      p_total,
    );
  }

  late final _NDIlib_recv_get_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_queue_t>)>>(
          'NDIlib_recv_get_queue');
  late final _NDIlib_recv_get_queue =
      _NDIlib_recv_get_queuePtr.asFunction<void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_queue_t>)>();

  void NDIlib_recv_clear_connection_metadata(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_clear_connection_metadata(
      p_instance,
    );
  }

  late final _NDIlib_recv_clear_connection_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t)>>('NDIlib_recv_clear_connection_metadata');
  late final _NDIlib_recv_clear_connection_metadata =
      _NDIlib_recv_clear_connection_metadataPtr.asFunction<void Function(NDIlib_recv_instance_t)>();

  void NDIlib_recv_add_connection_metadata(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_recv_add_connection_metadata(
      p_instance,
      p_metadata,
    );
  }

  late final _NDIlib_recv_add_connection_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_recv_add_connection_metadata');
  late final _NDIlib_recv_add_connection_metadata = _NDIlib_recv_add_connection_metadataPtr.asFunction<
      void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  int NDIlib_recv_get_no_connections(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_get_no_connections(
      p_instance,
    );
  }

  late final _NDIlib_recv_get_no_connectionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_get_no_connections');
  late final _NDIlib_recv_get_no_connections =
      _NDIlib_recv_get_no_connectionsPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  ffi.Pointer<ffi.Int8> NDIlib_recv_get_web_control(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_get_web_control(
      p_instance,
    );
  }

  late final _NDIlib_recv_get_web_controlPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>>(
          'NDIlib_recv_get_web_control');
  late final _NDIlib_recv_get_web_control =
      _NDIlib_recv_get_web_controlPtr.asFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_is_supported(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_is_supported(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_is_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_is_supported');
  late final _NDIlib_recv_ptz_is_supported =
      _NDIlib_recv_ptz_is_supportedPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_recording_is_supported(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_recording_is_supported(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_is_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_recording_is_supported');
  late final _NDIlib_recv_recording_is_supported =
      _NDIlib_recv_recording_is_supportedPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_zoom(
    NDIlib_recv_instance_t p_instance,
    double zoom_value,
  ) {
    return _NDIlib_recv_ptz_zoom(
          p_instance,
          zoom_value,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_zoomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>('NDIlib_recv_ptz_zoom');
  late final _NDIlib_recv_ptz_zoom =
      _NDIlib_recv_ptz_zoomPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_ptz_zoom_speed(
    NDIlib_recv_instance_t p_instance,
    double zoom_speed,
  ) {
    return _NDIlib_recv_ptz_zoom_speed(
          p_instance,
          zoom_speed,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_zoom_speedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>('NDIlib_recv_ptz_zoom_speed');
  late final _NDIlib_recv_ptz_zoom_speed =
      _NDIlib_recv_ptz_zoom_speedPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_ptz_pan_tilt(
    NDIlib_recv_instance_t p_instance,
    double pan_value,
    double tilt_value,
  ) {
    return _NDIlib_recv_ptz_pan_tilt(
          p_instance,
          pan_value,
          tilt_value,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_pan_tiltPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float, ffi.Float)>>(
          'NDIlib_recv_ptz_pan_tilt');
  late final _NDIlib_recv_ptz_pan_tilt =
      _NDIlib_recv_ptz_pan_tiltPtr.asFunction<int Function(NDIlib_recv_instance_t, double, double)>();

  bool NDIlib_recv_ptz_pan_tilt_speed(
    NDIlib_recv_instance_t p_instance,
    double pan_speed,
    double tilt_speed,
  ) {
    return _NDIlib_recv_ptz_pan_tilt_speed(
          p_instance,
          pan_speed,
          tilt_speed,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_pan_tilt_speedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float, ffi.Float)>>(
          'NDIlib_recv_ptz_pan_tilt_speed');
  late final _NDIlib_recv_ptz_pan_tilt_speed =
      _NDIlib_recv_ptz_pan_tilt_speedPtr.asFunction<int Function(NDIlib_recv_instance_t, double, double)>();

  bool NDIlib_recv_ptz_store_preset(
    NDIlib_recv_instance_t p_instance,
    int preset_no,
  ) {
    return _NDIlib_recv_ptz_store_preset(
          p_instance,
          preset_no,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_store_presetPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Int32)>>(
          'NDIlib_recv_ptz_store_preset');
  late final _NDIlib_recv_ptz_store_preset =
      _NDIlib_recv_ptz_store_presetPtr.asFunction<int Function(NDIlib_recv_instance_t, int)>();

  bool NDIlib_recv_ptz_recall_preset(
    NDIlib_recv_instance_t p_instance,
    int preset_no,
    double speed,
  ) {
    return _NDIlib_recv_ptz_recall_preset(
          p_instance,
          preset_no,
          speed,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_recall_presetPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Int32, ffi.Float)>>(
          'NDIlib_recv_ptz_recall_preset');
  late final _NDIlib_recv_ptz_recall_preset =
      _NDIlib_recv_ptz_recall_presetPtr.asFunction<int Function(NDIlib_recv_instance_t, int, double)>();

  bool NDIlib_recv_ptz_auto_focus(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_auto_focus(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_auto_focusPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_auto_focus');
  late final _NDIlib_recv_ptz_auto_focus =
      _NDIlib_recv_ptz_auto_focusPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_focus(
    NDIlib_recv_instance_t p_instance,
    double focus_value,
  ) {
    return _NDIlib_recv_ptz_focus(
          p_instance,
          focus_value,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_focusPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>('NDIlib_recv_ptz_focus');
  late final _NDIlib_recv_ptz_focus =
      _NDIlib_recv_ptz_focusPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_ptz_focus_speed(
    NDIlib_recv_instance_t p_instance,
    double focus_speed,
  ) {
    return _NDIlib_recv_ptz_focus_speed(
          p_instance,
          focus_speed,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_focus_speedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>('NDIlib_recv_ptz_focus_speed');
  late final _NDIlib_recv_ptz_focus_speed =
      _NDIlib_recv_ptz_focus_speedPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_ptz_white_balance_auto(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_white_balance_auto(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_white_balance_autoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_white_balance_auto');
  late final _NDIlib_recv_ptz_white_balance_auto =
      _NDIlib_recv_ptz_white_balance_autoPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_white_balance_indoor(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_white_balance_indoor(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_white_balance_indoorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_white_balance_indoor');
  late final _NDIlib_recv_ptz_white_balance_indoor =
      _NDIlib_recv_ptz_white_balance_indoorPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_white_balance_outdoor(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_white_balance_outdoor(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_white_balance_outdoorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_white_balance_outdoor');
  late final _NDIlib_recv_ptz_white_balance_outdoor =
      _NDIlib_recv_ptz_white_balance_outdoorPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_white_balance_oneshot(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_white_balance_oneshot(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_white_balance_oneshotPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_white_balance_oneshot');
  late final _NDIlib_recv_ptz_white_balance_oneshot =
      _NDIlib_recv_ptz_white_balance_oneshotPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_white_balance_manual(
    NDIlib_recv_instance_t p_instance,
    double red,
    double blue,
  ) {
    return _NDIlib_recv_ptz_white_balance_manual(
          p_instance,
          red,
          blue,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_white_balance_manualPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float, ffi.Float)>>(
          'NDIlib_recv_ptz_white_balance_manual');
  late final _NDIlib_recv_ptz_white_balance_manual =
      _NDIlib_recv_ptz_white_balance_manualPtr.asFunction<int Function(NDIlib_recv_instance_t, double, double)>();

  bool NDIlib_recv_ptz_exposure_auto(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_ptz_exposure_auto(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_exposure_autoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_ptz_exposure_auto');
  late final _NDIlib_recv_ptz_exposure_auto =
      _NDIlib_recv_ptz_exposure_autoPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_ptz_exposure_manual(
    NDIlib_recv_instance_t p_instance,
    double exposure_level,
  ) {
    return _NDIlib_recv_ptz_exposure_manual(
          p_instance,
          exposure_level,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_exposure_manualPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>(
          'NDIlib_recv_ptz_exposure_manual');
  late final _NDIlib_recv_ptz_exposure_manual =
      _NDIlib_recv_ptz_exposure_manualPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_ptz_exposure_manual_v2(
    NDIlib_recv_instance_t p_instance,
    double iris,
    double gain,
    double shutter_speed,
  ) {
    return _NDIlib_recv_ptz_exposure_manual_v2(
          p_instance,
          iris,
          gain,
          shutter_speed,
        ) !=
        0;
  }

  late final _NDIlib_recv_ptz_exposure_manual_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float, ffi.Float, ffi.Float)>>(
          'NDIlib_recv_ptz_exposure_manual_v2');
  late final _NDIlib_recv_ptz_exposure_manual_v2 =
      _NDIlib_recv_ptz_exposure_manual_v2Ptr.asFunction<int Function(NDIlib_recv_instance_t, double, double, double)>();

  bool NDIlib_recv_recording_start(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<ffi.Int8> p_filename_hint,
  ) {
    return _NDIlib_recv_recording_start(
          p_instance,
          p_filename_hint,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_startPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Pointer<ffi.Int8>)>>(
          'NDIlib_recv_recording_start');
  late final _NDIlib_recv_recording_start =
      _NDIlib_recv_recording_startPtr.asFunction<int Function(NDIlib_recv_instance_t, ffi.Pointer<ffi.Int8>)>();

  bool NDIlib_recv_recording_stop(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_recording_stop(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_recording_stop');
  late final _NDIlib_recv_recording_stop =
      _NDIlib_recv_recording_stopPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_recording_set_audio_level(
    NDIlib_recv_instance_t p_instance,
    double level_dB,
  ) {
    return _NDIlib_recv_recording_set_audio_level(
          p_instance,
          level_dB,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_set_audio_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Float)>>(
          'NDIlib_recv_recording_set_audio_level');
  late final _NDIlib_recv_recording_set_audio_level =
      _NDIlib_recv_recording_set_audio_levelPtr.asFunction<int Function(NDIlib_recv_instance_t, double)>();

  bool NDIlib_recv_recording_is_recording(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_recording_is_recording(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_is_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t)>>('NDIlib_recv_recording_is_recording');
  late final _NDIlib_recv_recording_is_recording =
      _NDIlib_recv_recording_is_recordingPtr.asFunction<int Function(NDIlib_recv_instance_t)>();

  ffi.Pointer<ffi.Int8> NDIlib_recv_recording_get_filename(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_recording_get_filename(
      p_instance,
    );
  }

  late final _NDIlib_recv_recording_get_filenamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>>(
          'NDIlib_recv_recording_get_filename');
  late final _NDIlib_recv_recording_get_filename =
      _NDIlib_recv_recording_get_filenamePtr.asFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>();

  ffi.Pointer<ffi.Int8> NDIlib_recv_recording_get_error(
    NDIlib_recv_instance_t p_instance,
  ) {
    return _NDIlib_recv_recording_get_error(
      p_instance,
    );
  }

  late final _NDIlib_recv_recording_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>>(
          'NDIlib_recv_recording_get_error');
  late final _NDIlib_recv_recording_get_error =
      _NDIlib_recv_recording_get_errorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(NDIlib_recv_instance_t)>();

  bool NDIlib_recv_recording_get_times(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_recv_recording_time_t> p_times,
  ) {
    return _NDIlib_recv_recording_get_times(
          p_instance,
          p_times,
        ) !=
        0;
  }

  late final _NDIlib_recv_recording_get_timesPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_recording_time_t>)>>(
      'NDIlib_recv_recording_get_times');
  late final _NDIlib_recv_recording_get_times = _NDIlib_recv_recording_get_timesPtr.asFunction<
      int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_recv_recording_time_t>)>();

  NDIlib_send_instance_t NDIlib_send_create(
    ffi.Pointer<NDIlib_send_create_t> p_create_settings,
  ) {
    return _NDIlib_send_create(
      p_create_settings,
    );
  }

  late final _NDIlib_send_createPtr =
      _lookup<ffi.NativeFunction<NDIlib_send_instance_t Function(ffi.Pointer<NDIlib_send_create_t>)>>(
          'NDIlib_send_create');
  late final _NDIlib_send_create =
      _NDIlib_send_createPtr.asFunction<NDIlib_send_instance_t Function(ffi.Pointer<NDIlib_send_create_t>)>();

  void NDIlib_send_destroy(
    NDIlib_send_instance_t p_instance,
  ) {
    return _NDIlib_send_destroy(
      p_instance,
    );
  }

  late final _NDIlib_send_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t)>>('NDIlib_send_destroy');
  late final _NDIlib_send_destroy = _NDIlib_send_destroyPtr.asFunction<void Function(NDIlib_send_instance_t)>();

  void NDIlib_send_send_video_v2(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
  ) {
    return _NDIlib_send_send_video_v2(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_send_send_video_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>>(
          'NDIlib_send_send_video_v2');
  late final _NDIlib_send_send_video_v2 = _NDIlib_send_send_video_v2Ptr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  void NDIlib_send_send_video_async_v2(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
  ) {
    return _NDIlib_send_send_video_async_v2(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_send_send_video_async_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>>(
          'NDIlib_send_send_video_async_v2');
  late final _NDIlib_send_send_video_async_v2 = _NDIlib_send_send_video_async_v2Ptr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  void NDIlib_send_send_audio_v2(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_audio_data,
  ) {
    return _NDIlib_send_send_audio_v2(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_send_send_audio_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>>(
          'NDIlib_send_send_audio_v2');
  late final _NDIlib_send_send_audio_v2 = _NDIlib_send_send_audio_v2Ptr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_send_send_audio_v3(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v3_t> p_audio_data,
  ) {
    return _NDIlib_send_send_audio_v3(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_send_send_audio_v3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>>(
          'NDIlib_send_send_audio_v3');
  late final _NDIlib_send_send_audio_v3 = _NDIlib_send_send_audio_v3Ptr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>();

  void NDIlib_send_send_metadata(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_send_send_metadata(
      p_instance,
      p_metadata,
    );
  }

  late final _NDIlib_send_send_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_send_send_metadata');
  late final _NDIlib_send_send_metadata = _NDIlib_send_send_metadataPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  int NDIlib_send_capture(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
    int timeout_in_ms,
  ) {
    return _NDIlib_send_capture(
      p_instance,
      p_metadata,
      timeout_in_ms,
    );
  }

  late final _NDIlib_send_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>, ffi.Uint32)>>('NDIlib_send_capture');
  late final _NDIlib_send_capture = _NDIlib_send_capturePtr.asFunction<
      int Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>, int)>();

  void NDIlib_send_free_metadata(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_send_free_metadata(
      p_instance,
      p_metadata,
    );
  }

  late final _NDIlib_send_free_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_send_free_metadata');
  late final _NDIlib_send_free_metadata = _NDIlib_send_free_metadataPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  bool NDIlib_send_get_tally(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_tally_t> p_tally,
    int timeout_in_ms,
  ) {
    return _NDIlib_send_get_tally(
          p_instance,
          p_tally,
          timeout_in_ms,
        ) !=
        0;
  }

  late final _NDIlib_send_get_tallyPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_tally_t>, ffi.Uint32)>>(
          'NDIlib_send_get_tally');
  late final _NDIlib_send_get_tally =
      _NDIlib_send_get_tallyPtr.asFunction<int Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_tally_t>, int)>();

  int NDIlib_send_get_no_connections(
    NDIlib_send_instance_t p_instance,
    int timeout_in_ms,
  ) {
    return _NDIlib_send_get_no_connections(
      p_instance,
      timeout_in_ms,
    );
  }

  late final _NDIlib_send_get_no_connectionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(NDIlib_send_instance_t, ffi.Uint32)>>(
          'NDIlib_send_get_no_connections');
  late final _NDIlib_send_get_no_connections =
      _NDIlib_send_get_no_connectionsPtr.asFunction<int Function(NDIlib_send_instance_t, int)>();

  void NDIlib_send_clear_connection_metadata(
    NDIlib_send_instance_t p_instance,
  ) {
    return _NDIlib_send_clear_connection_metadata(
      p_instance,
    );
  }

  late final _NDIlib_send_clear_connection_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t)>>('NDIlib_send_clear_connection_metadata');
  late final _NDIlib_send_clear_connection_metadata =
      _NDIlib_send_clear_connection_metadataPtr.asFunction<void Function(NDIlib_send_instance_t)>();

  void NDIlib_send_add_connection_metadata(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
  ) {
    return _NDIlib_send_add_connection_metadata(
      p_instance,
      p_metadata,
    );
  }

  late final _NDIlib_send_add_connection_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>>(
          'NDIlib_send_add_connection_metadata');
  late final _NDIlib_send_add_connection_metadata = _NDIlib_send_add_connection_metadataPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_metadata_frame_t>)>();

  void NDIlib_send_set_failover(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_source_t> p_failover_source,
  ) {
    return _NDIlib_send_set_failover(
      p_instance,
      p_failover_source,
    );
  }

  late final _NDIlib_send_set_failoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_source_t>)>>(
          'NDIlib_send_set_failover');
  late final _NDIlib_send_set_failover =
      _NDIlib_send_set_failoverPtr.asFunction<void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_source_t>)>();

  ffi.Pointer<NDIlib_source_t> NDIlib_send_get_source_name(
    NDIlib_send_instance_t p_instance,
  ) {
    return _NDIlib_send_get_source_name(
      p_instance,
    );
  }

  late final _NDIlib_send_get_source_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_source_t> Function(NDIlib_send_instance_t)>>(
          'NDIlib_send_get_source_name');
  late final _NDIlib_send_get_source_name =
      _NDIlib_send_get_source_namePtr.asFunction<ffi.Pointer<NDIlib_source_t> Function(NDIlib_send_instance_t)>();

  NDIlib_routing_instance_t NDIlib_routing_create(
    ffi.Pointer<NDIlib_routing_create_t> p_create_settings,
  ) {
    return _NDIlib_routing_create(
      p_create_settings,
    );
  }

  late final _NDIlib_routing_createPtr =
      _lookup<ffi.NativeFunction<NDIlib_routing_instance_t Function(ffi.Pointer<NDIlib_routing_create_t>)>>(
          'NDIlib_routing_create');
  late final _NDIlib_routing_create =
      _NDIlib_routing_createPtr.asFunction<NDIlib_routing_instance_t Function(ffi.Pointer<NDIlib_routing_create_t>)>();

  void NDIlib_routing_destroy(
    NDIlib_routing_instance_t p_instance,
  ) {
    return _NDIlib_routing_destroy(
      p_instance,
    );
  }

  late final _NDIlib_routing_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_routing_instance_t)>>('NDIlib_routing_destroy');
  late final _NDIlib_routing_destroy =
      _NDIlib_routing_destroyPtr.asFunction<void Function(NDIlib_routing_instance_t)>();

  bool NDIlib_routing_change(
    NDIlib_routing_instance_t p_instance,
    ffi.Pointer<NDIlib_source_t> p_source,
  ) {
    return _NDIlib_routing_change(
          p_instance,
          p_source,
        ) !=
        0;
  }

  late final _NDIlib_routing_changePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_routing_instance_t, ffi.Pointer<NDIlib_source_t>)>>(
          'NDIlib_routing_change');
  late final _NDIlib_routing_change =
      _NDIlib_routing_changePtr.asFunction<int Function(NDIlib_routing_instance_t, ffi.Pointer<NDIlib_source_t>)>();

  bool NDIlib_routing_clear(
    NDIlib_routing_instance_t p_instance,
  ) {
    return _NDIlib_routing_clear(
          p_instance,
        ) !=
        0;
  }

  late final _NDIlib_routing_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(NDIlib_routing_instance_t)>>('NDIlib_routing_clear');
  late final _NDIlib_routing_clear = _NDIlib_routing_clearPtr.asFunction<int Function(NDIlib_routing_instance_t)>();

  int NDIlib_routing_get_no_connections(
    NDIlib_routing_instance_t p_instance,
    int timeout_in_ms,
  ) {
    return _NDIlib_routing_get_no_connections(
      p_instance,
      timeout_in_ms,
    );
  }

  late final _NDIlib_routing_get_no_connectionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(NDIlib_routing_instance_t, ffi.Uint32)>>(
          'NDIlib_routing_get_no_connections');
  late final _NDIlib_routing_get_no_connections =
      _NDIlib_routing_get_no_connectionsPtr.asFunction<int Function(NDIlib_routing_instance_t, int)>();

  ffi.Pointer<NDIlib_source_t> NDIlib_routing_get_source_name(
    NDIlib_routing_instance_t p_instance,
  ) {
    return _NDIlib_routing_get_source_name(
      p_instance,
    );
  }

  late final _NDIlib_routing_get_source_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_source_t> Function(NDIlib_routing_instance_t)>>(
          'NDIlib_routing_get_source_name');
  late final _NDIlib_routing_get_source_name =
      _NDIlib_routing_get_source_namePtr.asFunction<ffi.Pointer<NDIlib_source_t> Function(NDIlib_routing_instance_t)>();

  void NDIlib_util_send_send_audio_interleaved_16s(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t> p_audio_data,
  ) {
    return _NDIlib_util_send_send_audio_interleaved_16s(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_util_send_send_audio_interleaved_16sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_send_instance_t,
              ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>>('NDIlib_util_send_send_audio_interleaved_16s');
  late final _NDIlib_util_send_send_audio_interleaved_16s = _NDIlib_util_send_send_audio_interleaved_16sPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>();

  void NDIlib_util_send_send_audio_interleaved_32s(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t> p_audio_data,
  ) {
    return _NDIlib_util_send_send_audio_interleaved_32s(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_util_send_send_audio_interleaved_32sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_send_instance_t,
              ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>)>>('NDIlib_util_send_send_audio_interleaved_32s');
  late final _NDIlib_util_send_send_audio_interleaved_32s = _NDIlib_util_send_send_audio_interleaved_32sPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>)>();

  void NDIlib_util_send_send_audio_interleaved_32f(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t> p_audio_data,
  ) {
    return _NDIlib_util_send_send_audio_interleaved_32f(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_util_send_send_audio_interleaved_32fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_send_instance_t,
              ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>>('NDIlib_util_send_send_audio_interleaved_32f');
  late final _NDIlib_util_send_send_audio_interleaved_32f = _NDIlib_util_send_send_audio_interleaved_32fPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>();

  void NDIlib_util_audio_to_interleaved_16s_v2(
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t> p_dst,
  ) {
    return _NDIlib_util_audio_to_interleaved_16s_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_to_interleaved_16s_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>,
              ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>>('NDIlib_util_audio_to_interleaved_16s_v2');
  late final _NDIlib_util_audio_to_interleaved_16s_v2 = _NDIlib_util_audio_to_interleaved_16s_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>, ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>();

  void NDIlib_util_audio_from_interleaved_16s_v2(
    ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_dst,
  ) {
    return _NDIlib_util_audio_from_interleaved_16s_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_from_interleaved_16s_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>,
              ffi.Pointer<NDIlib_audio_frame_v2_t>)>>('NDIlib_util_audio_from_interleaved_16s_v2');
  late final _NDIlib_util_audio_from_interleaved_16s_v2 = _NDIlib_util_audio_from_interleaved_16s_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_util_audio_to_interleaved_32s_v2(
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t> p_dst,
  ) {
    return _NDIlib_util_audio_to_interleaved_32s_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_to_interleaved_32s_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>,
              ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>)>>('NDIlib_util_audio_to_interleaved_32s_v2');
  late final _NDIlib_util_audio_to_interleaved_32s_v2 = _NDIlib_util_audio_to_interleaved_32s_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>, ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>)>();

  void NDIlib_util_audio_from_interleaved_32s_v2(
    ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_dst,
  ) {
    return _NDIlib_util_audio_from_interleaved_32s_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_from_interleaved_32s_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>,
              ffi.Pointer<NDIlib_audio_frame_v2_t>)>>('NDIlib_util_audio_from_interleaved_32s_v2');
  late final _NDIlib_util_audio_from_interleaved_32s_v2 = _NDIlib_util_audio_from_interleaved_32s_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32s_t>, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_util_audio_to_interleaved_32f_v2(
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t> p_dst,
  ) {
    return _NDIlib_util_audio_to_interleaved_32f_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_to_interleaved_32f_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>,
              ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>>('NDIlib_util_audio_to_interleaved_32f_v2');
  late final _NDIlib_util_audio_to_interleaved_32f_v2 = _NDIlib_util_audio_to_interleaved_32f_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_v2_t>, ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>();

  void NDIlib_util_audio_from_interleaved_32f_v2(
    ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_dst,
  ) {
    return _NDIlib_util_audio_from_interleaved_32f_v2(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_from_interleaved_32f_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>,
              ffi.Pointer<NDIlib_audio_frame_v2_t>)>>('NDIlib_util_audio_from_interleaved_32f_v2');
  late final _NDIlib_util_audio_from_interleaved_32f_v2 = _NDIlib_util_audio_from_interleaved_32f_v2Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_util_V210_to_P216(
    ffi.Pointer<NDIlib_video_frame_v2_t> p_src_v210,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_dst_p216,
  ) {
    return _NDIlib_util_V210_to_P216(
      p_src_v210,
      p_dst_p216,
    );
  }

  late final _NDIlib_util_V210_to_P216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_video_frame_v2_t>)>>('NDIlib_util_V210_to_P216');
  late final _NDIlib_util_V210_to_P216 = _NDIlib_util_V210_to_P216Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  void NDIlib_util_P216_to_V210(
    ffi.Pointer<NDIlib_video_frame_v2_t> p_src_p216,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_dst_v210,
  ) {
    return _NDIlib_util_P216_to_V210(
      p_src_p216,
      p_dst_v210,
    );
  }

  late final _NDIlib_util_P216_to_V210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_video_frame_v2_t>)>>('NDIlib_util_P216_to_V210');
  late final _NDIlib_util_P216_to_V210 = _NDIlib_util_P216_to_V210Ptr.asFunction<
      void Function(ffi.Pointer<NDIlib_video_frame_v2_t>, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  NDIlib_find_instance_t NDIlib_find_create2(
    ffi.Pointer<NDIlib_find_create_t> p_create_settings,
  ) {
    return _NDIlib_find_create2(
      p_create_settings,
    );
  }

  late final _NDIlib_find_create2Ptr =
      _lookup<ffi.NativeFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>>(
          'NDIlib_find_create2');
  late final _NDIlib_find_create2 =
      _NDIlib_find_create2Ptr.asFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>();

  NDIlib_find_instance_t NDIlib_find_create(
    ffi.Pointer<NDIlib_find_create_t> p_create_settings,
  ) {
    return _NDIlib_find_create(
      p_create_settings,
    );
  }

  late final _NDIlib_find_createPtr =
      _lookup<ffi.NativeFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>>(
          'NDIlib_find_create');
  late final _NDIlib_find_create =
      _NDIlib_find_createPtr.asFunction<NDIlib_find_instance_t Function(ffi.Pointer<NDIlib_find_create_t>)>();

  ffi.Pointer<NDIlib_source_t> NDIlib_find_get_sources(
    NDIlib_find_instance_t p_instance,
    ffi.Pointer<ffi.Uint32> p_no_sources,
    int timeout_in_ms,
  ) {
    return _NDIlib_find_get_sources(
      p_instance,
      p_no_sources,
      timeout_in_ms,
    );
  }

  late final _NDIlib_find_get_sourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NDIlib_source_t> Function(
              NDIlib_find_instance_t, ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('NDIlib_find_get_sources');
  late final _NDIlib_find_get_sources = _NDIlib_find_get_sourcesPtr.asFunction<
      ffi.Pointer<NDIlib_source_t> Function(NDIlib_find_instance_t, ffi.Pointer<ffi.Uint32>, int)>();

  NDIlib_recv_instance_t NDIlib_recv_create_v2(
    ffi.Pointer<NDIlib_recv_create_t> p_create_settings,
  ) {
    return _NDIlib_recv_create_v2(
      p_create_settings,
    );
  }

  late final _NDIlib_recv_create_v2Ptr =
      _lookup<ffi.NativeFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>>(
          'NDIlib_recv_create_v2');
  late final _NDIlib_recv_create_v2 =
      _NDIlib_recv_create_v2Ptr.asFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>();

  NDIlib_recv_instance_t NDIlib_recv_create2(
    ffi.Pointer<NDIlib_recv_create_t> p_create_settings,
  ) {
    return _NDIlib_recv_create2(
      p_create_settings,
    );
  }

  late final _NDIlib_recv_create2Ptr =
      _lookup<ffi.NativeFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>>(
          'NDIlib_recv_create2');
  late final _NDIlib_recv_create2 =
      _NDIlib_recv_create2Ptr.asFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>();

  NDIlib_recv_instance_t NDIlib_recv_create(
    ffi.Pointer<NDIlib_recv_create_t> p_create_settings,
  ) {
    return _NDIlib_recv_create(
      p_create_settings,
    );
  }

  late final _NDIlib_recv_createPtr =
      _lookup<ffi.NativeFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>>(
          'NDIlib_recv_create');
  late final _NDIlib_recv_create =
      _NDIlib_recv_createPtr.asFunction<NDIlib_recv_instance_t Function(ffi.Pointer<NDIlib_recv_create_t>)>();

  int NDIlib_recv_capture(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_t> p_video_data,
    ffi.Pointer<NDIlib_audio_frame_t> p_audio_data,
    ffi.Pointer<NDIlib_metadata_frame_t> p_metadata,
    int timeout_in_ms,
  ) {
    return _NDIlib_recv_capture(
      p_instance,
      p_video_data,
      p_audio_data,
      p_metadata,
      timeout_in_ms,
    );
  }

  late final _NDIlib_recv_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              NDIlib_recv_instance_t,
              ffi.Pointer<NDIlib_video_frame_t>,
              ffi.Pointer<NDIlib_audio_frame_t>,
              ffi.Pointer<NDIlib_metadata_frame_t>,
              ffi.Uint32)>>('NDIlib_recv_capture');
  late final _NDIlib_recv_capture = _NDIlib_recv_capturePtr.asFunction<
      int Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_t>, ffi.Pointer<NDIlib_audio_frame_t>,
          ffi.Pointer<NDIlib_metadata_frame_t>, int)>();

  void NDIlib_recv_free_video(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_t> p_video_data,
  ) {
    return _NDIlib_recv_free_video(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_recv_free_videoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>>(
          'NDIlib_recv_free_video');
  late final _NDIlib_recv_free_video =
      _NDIlib_recv_free_videoPtr.asFunction<void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>();

  void NDIlib_recv_free_audio(
    NDIlib_recv_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_t> p_audio_data,
  ) {
    return _NDIlib_recv_free_audio(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_recv_free_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_t>)>>(
          'NDIlib_recv_free_audio');
  late final _NDIlib_recv_free_audio =
      _NDIlib_recv_free_audioPtr.asFunction<void Function(NDIlib_recv_instance_t, ffi.Pointer<NDIlib_audio_frame_t>)>();

  void NDIlib_send_send_video(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_t> p_video_data,
  ) {
    return _NDIlib_send_send_video(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_send_send_videoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>>(
          'NDIlib_send_send_video');
  late final _NDIlib_send_send_video =
      _NDIlib_send_send_videoPtr.asFunction<void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>();

  void NDIlib_send_send_video_async(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_t> p_video_data,
  ) {
    return _NDIlib_send_send_video_async(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_send_send_video_asyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>>(
          'NDIlib_send_send_video_async');
  late final _NDIlib_send_send_video_async = _NDIlib_send_send_video_asyncPtr.asFunction<
      void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_video_frame_t>)>();

  void NDIlib_send_send_audio(
    NDIlib_send_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_t> p_audio_data,
  ) {
    return _NDIlib_send_send_audio(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_send_send_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_t>)>>(
          'NDIlib_send_send_audio');
  late final _NDIlib_send_send_audio =
      _NDIlib_send_send_audioPtr.asFunction<void Function(NDIlib_send_instance_t, ffi.Pointer<NDIlib_audio_frame_t>)>();

  void NDIlib_util_audio_to_interleaved_16s(
    ffi.Pointer<NDIlib_audio_frame_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t> p_dst,
  ) {
    return _NDIlib_util_audio_to_interleaved_16s(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_to_interleaved_16sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_t>,
              ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>>('NDIlib_util_audio_to_interleaved_16s');
  late final _NDIlib_util_audio_to_interleaved_16s = _NDIlib_util_audio_to_interleaved_16sPtr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_t>, ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>)>();

  void NDIlib_util_audio_from_interleaved_16s(
    ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_t> p_dst,
  ) {
    return _NDIlib_util_audio_from_interleaved_16s(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_from_interleaved_16sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>,
              ffi.Pointer<NDIlib_audio_frame_t>)>>('NDIlib_util_audio_from_interleaved_16s');
  late final _NDIlib_util_audio_from_interleaved_16s = _NDIlib_util_audio_from_interleaved_16sPtr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_16s_t>, ffi.Pointer<NDIlib_audio_frame_t>)>();

  void NDIlib_util_audio_to_interleaved_32f(
    ffi.Pointer<NDIlib_audio_frame_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t> p_dst,
  ) {
    return _NDIlib_util_audio_to_interleaved_32f(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_to_interleaved_32fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_t>,
              ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>>('NDIlib_util_audio_to_interleaved_32f');
  late final _NDIlib_util_audio_to_interleaved_32f = _NDIlib_util_audio_to_interleaved_32fPtr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_t>, ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>)>();

  void NDIlib_util_audio_from_interleaved_32f(
    ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t> p_src,
    ffi.Pointer<NDIlib_audio_frame_t> p_dst,
  ) {
    return _NDIlib_util_audio_from_interleaved_32f(
      p_src,
      p_dst,
    );
  }

  late final _NDIlib_util_audio_from_interleaved_32fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>,
              ffi.Pointer<NDIlib_audio_frame_t>)>>('NDIlib_util_audio_from_interleaved_32f');
  late final _NDIlib_util_audio_from_interleaved_32f = _NDIlib_util_audio_from_interleaved_32fPtr.asFunction<
      void Function(ffi.Pointer<NDIlib_audio_frame_interleaved_32f_t>, ffi.Pointer<NDIlib_audio_frame_t>)>();

  NDIlib_framesync_instance_t NDIlib_framesync_create(
    NDIlib_recv_instance_t p_receiver,
  ) {
    return _NDIlib_framesync_create(
      p_receiver,
    );
  }

  late final _NDIlib_framesync_createPtr =
      _lookup<ffi.NativeFunction<NDIlib_framesync_instance_t Function(NDIlib_recv_instance_t)>>(
          'NDIlib_framesync_create');
  late final _NDIlib_framesync_create =
      _NDIlib_framesync_createPtr.asFunction<NDIlib_framesync_instance_t Function(NDIlib_recv_instance_t)>();

  void NDIlib_framesync_destroy(
    NDIlib_framesync_instance_t p_instance,
  ) {
    return _NDIlib_framesync_destroy(
      p_instance,
    );
  }

  late final _NDIlib_framesync_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_framesync_instance_t)>>('NDIlib_framesync_destroy');
  late final _NDIlib_framesync_destroy =
      _NDIlib_framesync_destroyPtr.asFunction<void Function(NDIlib_framesync_instance_t)>();

  void NDIlib_framesync_capture_audio(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_audio_data,
    int sample_rate,
    int no_channels,
    int no_samples,
  ) {
    return _NDIlib_framesync_capture_audio(
      p_instance,
      p_audio_data,
      sample_rate,
      no_channels,
      no_samples,
    );
  }

  late final _NDIlib_framesync_capture_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('NDIlib_framesync_capture_audio');
  late final _NDIlib_framesync_capture_audio = _NDIlib_framesync_capture_audioPtr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>, int, int, int)>();

  void NDIlib_framesync_capture_audio_v2(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v3_t> p_audio_data,
    int sample_rate,
    int no_channels,
    int no_samples,
  ) {
    return _NDIlib_framesync_capture_audio_v2(
      p_instance,
      p_audio_data,
      sample_rate,
      no_channels,
      no_samples,
    );
  }

  late final _NDIlib_framesync_capture_audio_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('NDIlib_framesync_capture_audio_v2');
  late final _NDIlib_framesync_capture_audio_v2 = _NDIlib_framesync_capture_audio_v2Ptr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>, int, int, int)>();

  void NDIlib_framesync_free_audio(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v2_t> p_audio_data,
  ) {
    return _NDIlib_framesync_free_audio(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_framesync_free_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>>(
          'NDIlib_framesync_free_audio');
  late final _NDIlib_framesync_free_audio = _NDIlib_framesync_free_audioPtr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v2_t>)>();

  void NDIlib_framesync_free_audio_v2(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_audio_frame_v3_t> p_audio_data,
  ) {
    return _NDIlib_framesync_free_audio_v2(
      p_instance,
      p_audio_data,
    );
  }

  late final _NDIlib_framesync_free_audio_v2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>>(
          'NDIlib_framesync_free_audio_v2');
  late final _NDIlib_framesync_free_audio_v2 = _NDIlib_framesync_free_audio_v2Ptr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_audio_frame_v3_t>)>();

  int NDIlib_framesync_audio_queue_depth(
    NDIlib_framesync_instance_t p_instance,
  ) {
    return _NDIlib_framesync_audio_queue_depth(
      p_instance,
    );
  }

  late final _NDIlib_framesync_audio_queue_depthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(NDIlib_framesync_instance_t)>>(
          'NDIlib_framesync_audio_queue_depth');
  late final _NDIlib_framesync_audio_queue_depth =
      _NDIlib_framesync_audio_queue_depthPtr.asFunction<int Function(NDIlib_framesync_instance_t)>();

  void NDIlib_framesync_capture_video(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
    int field_type,
  ) {
    return _NDIlib_framesync_capture_video(
      p_instance,
      p_video_data,
      field_type,
    );
  }

  late final _NDIlib_framesync_capture_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>,
              ffi.Int32)>>('NDIlib_framesync_capture_video');
  late final _NDIlib_framesync_capture_video = _NDIlib_framesync_capture_videoPtr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>, int)>();

  void NDIlib_framesync_free_video(
    NDIlib_framesync_instance_t p_instance,
    ffi.Pointer<NDIlib_video_frame_v2_t> p_video_data,
  ) {
    return _NDIlib_framesync_free_video(
      p_instance,
      p_video_data,
    );
  }

  late final _NDIlib_framesync_free_videoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>>(
          'NDIlib_framesync_free_video');
  late final _NDIlib_framesync_free_video = _NDIlib_framesync_free_videoPtr.asFunction<
      void Function(NDIlib_framesync_instance_t, ffi.Pointer<NDIlib_video_frame_v2_t>)>();

  ffi.Pointer<NDIlib_v5> NDIlib_v5_load() {
    return _NDIlib_v5_load();
  }

  late final _NDIlib_v5_loadPtr = _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_v5> Function()>>('NDIlib_v5_load');
  late final _NDIlib_v5_load = _NDIlib_v5_loadPtr.asFunction<ffi.Pointer<NDIlib_v5> Function()>();

  ffi.Pointer<NDIlib_v4_5> NDIlib_v4_5_load() {
    return _NDIlib_v4_5_load();
  }

  late final _NDIlib_v4_5_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_v4_5> Function()>>('NDIlib_v4_5_load');
  late final _NDIlib_v4_5_load = _NDIlib_v4_5_loadPtr.asFunction<ffi.Pointer<NDIlib_v4_5> Function()>();

  ffi.Pointer<NDIlib_v4> NDIlib_v4_load() {
    return _NDIlib_v4_load();
  }

  late final _NDIlib_v4_loadPtr = _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_v4> Function()>>('NDIlib_v4_load');
  late final _NDIlib_v4_load = _NDIlib_v4_loadPtr.asFunction<ffi.Pointer<NDIlib_v4> Function()>();

  ffi.Pointer<NDIlib_v3> NDIlib_v3_load() {
    return _NDIlib_v3_load();
  }

  late final _NDIlib_v3_loadPtr = _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_v3> Function()>>('NDIlib_v3_load');
  late final _NDIlib_v3_load = _NDIlib_v3_loadPtr.asFunction<ffi.Pointer<NDIlib_v3> Function()>();

  ffi.Pointer<NDIlib_v2> NDIlib_v2_load() {
    return _NDIlib_v2_load();
  }

  late final _NDIlib_v2_loadPtr = _lookup<ffi.NativeFunction<ffi.Pointer<NDIlib_v2> Function()>>('NDIlib_v2_load');
  late final _NDIlib_v2_load = _NDIlib_v2_loadPtr.asFunction<ffi.Pointer<NDIlib_v2> Function()>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;

abstract class NDIlib_frame_type_e {
  static const int NDIlib_frame_type_none = 0;
  static const int NDIlib_frame_type_video = 1;
  static const int NDIlib_frame_type_audio = 2;
  static const int NDIlib_frame_type_metadata = 3;
  static const int NDIlib_frame_type_error = 4;
  static const int NDIlib_frame_type_status_change = 100;
  static const int NDIlib_frame_type_max = 2147483647;
}

abstract class NDIlib_FourCC_video_type_e {
  static const int NDIlib_FourCC_video_type_UYVY = 1498831189;
  static const int NDIlib_FourCC_type_UYVY = 1498831189;
  static const int NDIlib_FourCC_video_type_UYVA = 1096178005;
  static const int NDIlib_FourCC_type_UYVA = 1096178005;
  static const int NDIlib_FourCC_video_type_P216 = 909193808;
  static const int NDIlib_FourCC_type_P216 = 909193808;
  static const int NDIlib_FourCC_video_type_PA16 = 909197648;
  static const int NDIlib_FourCC_type_PA16 = 909197648;
  static const int NDIlib_FourCC_video_type_YV12 = 842094169;
  static const int NDIlib_FourCC_type_YV12 = 842094169;
  static const int NDIlib_FourCC_video_type_I420 = 808596553;
  static const int NDIlib_FourCC_type_I420 = 808596553;
  static const int NDIlib_FourCC_video_type_NV12 = 842094158;
  static const int NDIlib_FourCC_type_NV12 = 842094158;
  static const int NDIlib_FourCC_video_type_BGRA = 1095911234;
  static const int NDIlib_FourCC_type_BGRA = 1095911234;
  static const int NDIlib_FourCC_video_type_BGRX = 1481787202;
  static const int NDIlib_FourCC_type_BGRX = 1481787202;
  static const int NDIlib_FourCC_video_type_RGBA = 1094862674;
  static const int NDIlib_FourCC_type_RGBA = 1094862674;
  static const int NDIlib_FourCC_video_type_RGBX = 1480738642;
  static const int NDIlib_FourCC_type_RGBX = 1480738642;
  static const int NDIlib_FourCC_video_type_max = 2147483647;
}

abstract class NDIlib_FourCC_audio_type_e {
  static const int NDIlib_FourCC_audio_type_FLTP = 1884572742;
  static const int NDIlib_FourCC_type_FLTP = 1884572742;
  static const int NDIlib_FourCC_audio_type_max = 2147483647;
}

abstract class NDIlib_frame_format_type_e {
  static const int NDIlib_frame_format_type_progressive = 1;
  static const int NDIlib_frame_format_type_interleaved = 0;
  static const int NDIlib_frame_format_type_field_0 = 2;
  static const int NDIlib_frame_format_type_field_1 = 3;
  static const int NDIlib_frame_format_type_max = 2147483647;
}

class NDIlib_source_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p_ndi_name;
}

class NDIlib_video_frame_v2_t extends ffi.Struct {
  @ffi.Int32()
  external int xres;

  @ffi.Int32()
  external int yres;

  @ffi.Int32()
  external int FourCC;

  @ffi.Int32()
  external int frame_rate_N;

  @ffi.Int32()
  external int frame_rate_D;

  @ffi.Float()
  external double picture_aspect_ratio;

  @ffi.Int32()
  external int frame_format_type;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Uint8> p_data;

  external ffi.Pointer<ffi.Int8> p_metadata;

  @ffi.Int64()
  external int timestamp;
}

class NDIlib_audio_frame_v2_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Float> p_data;

  @ffi.Int32()
  external int channel_stride_in_bytes;

  external ffi.Pointer<ffi.Int8> p_metadata;

  @ffi.Int64()
  external int timestamp;
}

class NDIlib_audio_frame_v3_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  @ffi.Int32()
  external int FourCC;

  external ffi.Pointer<ffi.Uint8> p_data;

  external ffi.Pointer<ffi.Int8> p_metadata;

  @ffi.Int64()
  external int timestamp;
}

class NDIlib_metadata_frame_t extends ffi.Struct {
  @ffi.Int32()
  external int length;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Int8> p_data;
}

class NDIlib_tally_t extends ffi.Struct {
  @ffi.Uint8()
  external int on_program;

  @ffi.Uint8()
  external int on_preview;
}

class NDIlib_find_create_t extends ffi.Struct {
  @ffi.Uint8()
  external int show_local_sources;

  external ffi.Pointer<ffi.Int8> p_groups;

  external ffi.Pointer<ffi.Int8> p_extra_ips;
}

typedef NDIlib_find_instance_t = ffi.Pointer<ffi.Void>;

abstract class NDIlib_recv_bandwidth_e {
  static const int NDIlib_recv_bandwidth_metadata_only = -10;
  static const int NDIlib_recv_bandwidth_audio_only = 10;
  static const int NDIlib_recv_bandwidth_lowest = 0;
  static const int NDIlib_recv_bandwidth_highest = 100;
  static const int NDIlib_recv_bandwidth_max = 2147483647;
}

abstract class NDIlib_recv_color_format_e {
  static const int NDIlib_recv_color_format_BGRX_BGRA = 0;
  static const int NDIlib_recv_color_format_UYVY_BGRA = 1;
  static const int NDIlib_recv_color_format_RGBX_RGBA = 2;
  static const int NDIlib_recv_color_format_UYVY_RGBA = 3;
  static const int NDIlib_recv_color_format_fastest = 100;
  static const int NDIlib_recv_color_format_best = 101;
  static const int NDIlib_recv_color_format_e_BGRX_BGRA = 0;
  static const int NDIlib_recv_color_format_e_UYVY_BGRA = 1;
  static const int NDIlib_recv_color_format_e_RGBX_RGBA = 2;
  static const int NDIlib_recv_color_format_e_UYVY_RGBA = 3;
  static const int NDIlib_recv_color_format_BGRX_BGRA_flipped = 1000;
  static const int NDIlib_recv_color_format_max = 2147483647;
}

class NDIlib_recv_create_v3_t extends ffi.Struct {
  external NDIlib_source_t source_to_connect_to;

  @ffi.Int32()
  external int color_format;

  @ffi.Int32()
  external int bandwidth;

  @ffi.Uint8()
  external int allow_video_fields;

  external ffi.Pointer<ffi.Int8> p_ndi_recv_name;
}

class NDIlib_recv_performance_t extends ffi.Struct {
  @ffi.Int64()
  external int video_frames;

  @ffi.Int64()
  external int audio_frames;

  @ffi.Int64()
  external int metadata_frames;
}

class NDIlib_recv_queue_t extends ffi.Struct {
  @ffi.Int32()
  external int video_frames;

  @ffi.Int32()
  external int audio_frames;

  @ffi.Int32()
  external int metadata_frames;
}

typedef NDIlib_recv_instance_t = ffi.Pointer<ffi.Void>;

class NDIlib_recv_recording_time_t extends ffi.Struct {
  @ffi.Int64()
  external int no_frames;

  @ffi.Int64()
  external int start_time;

  @ffi.Int64()
  external int last_time;
}

class NDIlib_send_create_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p_ndi_name;

  external ffi.Pointer<ffi.Int8> p_groups;

  @ffi.Uint8()
  external int clock_video;

  @ffi.Uint8()
  external int clock_audio;
}

typedef NDIlib_send_instance_t = ffi.Pointer<ffi.Void>;

class NDIlib_routing_create_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p_ndi_name;

  external ffi.Pointer<ffi.Int8> p_groups;
}

typedef NDIlib_routing_instance_t = ffi.Pointer<ffi.Void>;

class NDIlib_audio_frame_interleaved_16s_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  @ffi.Int32()
  external int reference_level;

  external ffi.Pointer<ffi.Int16> p_data;
}

class NDIlib_audio_frame_interleaved_32s_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  @ffi.Int32()
  external int reference_level;

  external ffi.Pointer<ffi.Int32> p_data;
}

class NDIlib_audio_frame_interleaved_32f_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Float> p_data;
}

class NDIlib_video_frame_t extends ffi.Struct {
  @ffi.Int32()
  external int xres;

  @ffi.Int32()
  external int yres;

  @ffi.Int32()
  external int FourCC;

  @ffi.Int32()
  external int frame_rate_N;

  @ffi.Int32()
  external int frame_rate_D;

  @ffi.Float()
  external double picture_aspect_ratio;

  @ffi.Int32()
  external int frame_format_type;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Uint8> p_data;

  @ffi.Int32()
  external int line_stride_in_bytes;
}

class NDIlib_audio_frame_t extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int no_channels;

  @ffi.Int32()
  external int no_samples;

  @ffi.Int64()
  external int timecode;

  external ffi.Pointer<ffi.Float> p_data;

  @ffi.Int32()
  external int channel_stride_in_bytes;
}

class NDIlib_recv_create_t extends ffi.Struct {
  external NDIlib_source_t source_to_connect_to;

  @ffi.Int32()
  external int color_format;

  @ffi.Int32()
  external int bandwidth;

  @ffi.Uint8()
  external int allow_video_fields;
}

typedef NDIlib_framesync_instance_t = ffi.Pointer<ffi.Void>;

class NDIlib_v5 extends ffi.Opaque {}

typedef NDIlib_v4_5 = NDIlib_v5;
typedef NDIlib_v4 = NDIlib_v5;
typedef NDIlib_v3 = NDIlib_v5;
typedef NDIlib_v2 = NDIlib_v5;

const String NDILIB_LIBRARY_NAME = 'Processing.NDI.Lib.x64.dll';

const String NDILIB_REDIST_FOLDER = 'NDI_RUNTIME_DIR_V5';

const String NDILIB_REDIST_URL = 'http://new.tk/NDIRedistV5';

const int NDILIB_CPP_DEFAULT_CONSTRUCTORS = 1;

const int false1 = 0;

const int true1 = 1;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;
